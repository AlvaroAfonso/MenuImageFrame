/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package alvaroycarlos.menuimageframe;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.regex.*;
import javax.swing.JInternalFrame;
import org.opencv.core.Core;
import org.opencv.imgcodecs.Imgcodecs;


/**
 *
 * @author alvaroafonsolopez
 */
public class MenuImage extends javax.swing.JFrame {
    
    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filter = null;
    File actFile = null;
    boolean redimension;
    boolean umbralizada = false;

    /** Creates new form MenuImage */
    public MenuImage() {
        nu.pattern.OpenCV.loadShared();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        initComponents();
        this.setResizable(true);
        this.setLocationRelativeTo(null);
        filter = new FileNameExtensionFilter("Imágenes","*.jpg","*.png","*.jpeg","jpg","png","jpeg");
        fc.addChoosableFileFilter(filter);
        this.setSize(1280, 775);
        //desktop.setPreferredSize(new Dimension(2550,1650));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        files = new javax.swing.JMenu();
        openButton = new javax.swing.JMenuItem();
        saveButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitButton = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        umbButton = new javax.swing.JMenuItem();
        ayuda = new javax.swing.JMenu();
        infoButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        files.setText("Acciones");

        openButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openButton.setText("Abrir");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        files.add(openButton);

        saveButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveButton.setText("Guardar selecionada");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        files.add(saveButton);
        files.add(jSeparator1);

        exitButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitButton.setText("Salir");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        files.add(exitButton);

        jMenuBar1.add(files);

        jMenu1.setText("Editar");

        umbButton.setText("Umbralizar");
        umbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umbButtonActionPerformed(evt);
            }
        });
        jMenu1.add(umbButton);

        jMenuBar1.add(jMenu1);

        ayuda.setText("Ayuda");

        infoButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        infoButton.setText("Información de uso");
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });
        ayuda.add(infoButton);

        jMenuBar1.add(ayuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        if(actFile == null){
            JOptionPane.showConfirmDialog(this, "Primero debe cargar una imagen","Error",JOptionPane.CLOSED_OPTION);
            return;
        }
        
        if(umbralizada == false){
            JOptionPane.showConfirmDialog(this, "Primero debe umbralizar una imagen","Error",JOptionPane.CLOSED_OPTION);
            return;
        }
        
        int res = fc.showSaveDialog(null);
      
        if(res == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            String path = file.getAbsolutePath();
            String regex = "(^[a-zA-Z0-9._ -]+)\\.(jpeg|jpg|png)$"; 
            Pattern r = Pattern.compile(regex);
            Matcher m = r.matcher(file.getName());
            try{
                if(m.matches()){
                    InternalFrame selectedFrame = (InternalFrame) desktop.getSelectedFrame();
                    Imgcodecs.imwrite(path, selectedFrame.getUmbMat());
                }else{
                    JOptionPane.showConfirmDialog(this, "Debe guardar con alguno de estos formatos: png, jpg o jpeg","Error",JOptionPane.CLOSED_OPTION);
                }
            }catch(Exception ex){
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        
        int res = fc.showOpenDialog(null);
        redimension = false;
        if(res == JFileChooser.APPROVE_OPTION){
            actFile = fc.getSelectedFile();
            //System.out.println(file.getAbsolutePath());
            
            InternalFrame miniFrame = new InternalFrame();
            
            if(!miniFrame.correctSize(actFile)){
                int rp = JOptionPane.showConfirmDialog(this, "Hemos definido que la imagen debe ser como" +
                        "máximo de 850x594, ¿desea redimensionar?", "Redimensionar imagen", JOptionPane.YES_NO_OPTION);
                //System.out.println(rp);
                if(rp == 1){
                    return;
                }
                redimension = true;
            }
            
            if(actFile != null){
            JInternalFrame frames[] = desktop.getAllFrames();
            for(JInternalFrame frame: frames){
                frame.dispose();
            }
        }
            
            desktop.add(miniFrame);
            miniFrame.loadImg(actFile, redimension);
            //System.out.println(file.getName());
            miniFrame.setTitle(actFile.getName());
            umbralizada = false;
        }
        
    }//GEN-LAST:event_openButtonActionPerformed
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int res = JOptionPane.showConfirmDialog(this, "¿Desea cerrar la ventena?", 
                "Finalizar programa", JOptionPane.YES_NO_OPTION);
        
        if (res == JOptionPane.YES_OPTION){
            this.dispose();
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        JOptionPane.showMessageDialog(this, 
                "El uso de esta aplicación consiste en cargar una imagen selecionada para poder aplicarle filtros de umbralizacion,"+
                        "\ncuyo resultado también podrá ser guardado en disco con el nombre elegido.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_infoButtonActionPerformed

    private void umbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umbButtonActionPerformed
        
        if(actFile == null){
            JOptionPane.showConfirmDialog(this, "Primero debe cargar una imagen.","Error",JOptionPane.CLOSED_OPTION);
            return;
        }
        
        String input = JOptionPane.showInputDialog(this, "Introduce un umbral.", "Umbral", JOptionPane.OK_CANCEL_OPTION);
        int res;
        try{
            res = Integer.parseInt(input);
        }catch(Exception ex){
            JOptionPane.showConfirmDialog(this, "El umbral debe ser un entero.","Error",JOptionPane.CLOSED_OPTION);
            return;
        }
        
        InternalFrame umbralFrame = new InternalFrame();
        
        int heigth = desktop.getHeight();
        int widht = desktop.getWidth();
        
        desktop.add(umbralFrame);
        umbralFrame.loadImg(actFile, redimension);
        umbralFrame.umbralizar(res);
            //System.out.println(file.getName());
        umbralFrame.setTitle(res + "");
        
        Rectangle caracteristicas = umbralFrame.getBounds();
        double randX = Math.random() * ( widht );
        caracteristicas.x = (int) randX;
        
        double randY = Math.random() * ( heigth );
        caracteristicas.y = (int) randY;
                
        umbralFrame.setBounds(caracteristicas);
        
        try{
            umbralFrame.setSelected(true);
        }catch(Exception e){
            
        }
        
        
        umbralizada = true;
    }//GEN-LAST:event_umbButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        JInternalFrame internalFrames[] =  desktop.getAllFrames();
        
        int heigth = desktop.getHeight();
        int widht = desktop.getWidth();
        
        for(JInternalFrame frame : internalFrames){
            Rectangle caracteristicas = frame.getBounds();
            if(caracteristicas.x >= widht){
                double randX = Math.random() * ( widht );
                caracteristicas.x = (int) randX;
            }
            if(caracteristicas.y >= heigth){
                double randY = Math.random() * ( heigth );
                caracteristicas.y = (int) randY;
            }
            frame.setBounds(caracteristicas);
        }
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuImage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ayuda;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu files;
    private javax.swing.JMenuItem infoButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem openButton;
    private javax.swing.JMenuItem saveButton;
    private javax.swing.JMenuItem umbButton;
    // End of variables declaration//GEN-END:variables

}
